<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-11 at 08:13:31.
 */
// DB table where the version info is stored
if (!defined('RUCKUSING_SCHEMA_TBL_NAME')) {
	define('RUCKUSING_SCHEMA_TBL_NAME', 'schema_info');
}

if (!defined('RUCKUSING_TS_SCHEMA_TBL_NAME')) {
	define('RUCKUSING_TS_SCHEMA_TBL_NAME', 'schema_migrations');
}

class Ruckusing_Adapter_Mysql_AdapterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Ruckusing_Adapter_Mysql_Adapter
     */
    protected $object;

    public function __construct()
    {
        $this->_dsn = array(
            'host' => 'localhost',
            'port' => 3306,
            'database' => 'ruckusing_migrations_test',
            'user' => 'rucku',
            'password' => 'rucku',
        );
        $this->_logger = Ruckusing_Logger::instance(RUCKUSING_BASE . '/tests/logs/tests.log');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new Ruckusing_Adapter_Mysql_Adapter($this->_dsn, $this->_logger);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        if ($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME)) {
            $this->object->dropTable(RUCKUSING_TS_SCHEMA_TBL_NAME);
        }

        if ($this->object->hasTable('users')) {
            $this->object->dropTable('users');
        }

        if ($this->object->hasTable('new_users')) {
            $this->object->dropTable('new_users');
        }

        if ($this->object->hasTable('contacts')) {
            $this->object->dropTable('contacts');
        }

        if ($this->object->hasTable('v_users')) {
            $this->object->executeDdl("DROP VIEW `v_users`;");
        }

        $this->object = null;
        parent::tearDown();
    }

    public function testConnect()
    {
        $dsn = array(
            'type' => 'mysql',
            'host' => 'localhost',
            'database' => 'ruckutest',
            'user' => 'toto',
            'password' => 'pass',
        );
        try {
            new Ruckusing_Adapter_Mysql_Adapter($dsn, $this->_logger);
        } catch (Ruckusing_Exception_AdapterConnexion $e) {
            $msg = "SQLSTATE[28000] [1045] Access denied for "
                . "user 'toto'@'localhost' (using password: YES)";
            $this->assertEquals($msg, $e->getMessage());
        }
        $dsn = array(
            'type' => 'mysql',
            'host' => 'localhost',
            'database' => 'ruckutest',
            'user' => 'rucku',
            'password' => 'rucku',
        );
        try {
            new Ruckusing_Adapter_Mysql_Adapter($dsn, $this->_logger);
        } catch (Ruckusing_Exception_AdapterConnexion $e) {
            $msg = "SQLSTATE[42000] [1044] Access denied for "
                . "user 'rucku'@'localhost' to database 'ruckutest'";
            $this->assertEquals($msg, $e->getMessage());
        }
    }

    public function testDetermineQueryType()
    {
        $query = '';
        $this->assertFalse($this->object->query($query));
        $query = 'UNKNOWN `name`';
        $this->assertFalse($this->object->query($query));

        $this->object->executeDdl('CREATE TABLE `users` (name varchar(20));');
        $query = 'SELECT * FROM `users`;';
        $actual = $this->object->query($query);
        $this->assertInternalType('array', $actual);
        $this->assertEmpty($actual);
        $query = 'INSERT INTO `users` VALUES (\'test\');';
        $actual = $this->object->query($query);
        $this->assertTrue($actual);
        $query = 'ALTER TABLE `users` CHANGE `name` `name` VARCHAR(50);';
        $actual = $this->object->query($query);
        $this->assertTrue($actual);
        $query = 'DROP TABLE IF EXISTS `new_users`;';
        $this->object->query($query);
        $query = 'RENAME TABLE `users` TO `new_users`;';
        $actual = $this->object->query($query);
        $this->assertTrue($actual);
        $query = 'SET NAMES \'utf8\';';
        $actual = $this->object->query($query);
        $this->assertTrue($actual);
    }

    public function testSetDbConfig()
    {
        $dbConfig = array(
            'uri' => 'file:///path/to/dsnfile'
        );
        $expected = 'uri:file:///path/to/dsnfile';
        $actual = new Ruckusing_Adapter_Mysql_Adapter($dbConfig, $this->_logger);
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_Adapter', $actual);
        $this->assertEquals($expected, $actual->getDsn());

        $dbConfig = array(
            'host' => 'testhost',
            'database' => 'ruckutest',
            'user' => 'toto',
            'password' => 'pass',
        );
        $expected = 'mysql:dbname=ruckutest;host=testhost';
        $actual = new Ruckusing_Adapter_Mysql_Adapter($dbConfig, $this->_logger);
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_Adapter', $actual);
        $this->assertEquals($expected, $actual->getDsn());

        $dbConfig = array(
            'database' => 'ruckutest',
            'socket' => '/tmp/mysqld.sock',
            'user' => 'toto',
            'password' => 'pass',
        );
        $expected = 'mysql:dbname=ruckutest;unix_socket=/tmp/mysqld.sock';
        $actual = new Ruckusing_Adapter_Mysql_Adapter($dbConfig, $this->_logger);
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_Adapter', $actual);
        $this->assertEquals($expected, $actual->getDsn());

        $dbConfig = 'dbConfig';
        try {
            $this->object->setDbConfig($dbConfig);
            $this->fail('checkDbConfig do not accept string argument!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'The argument dbConfig must be a array!';
            $this->assertEquals($msg, $ex->getMessage());
        }
    }

    public function testGetDsn()
    {
        $expected = 'mysql:dbname=ruckusing_migrations_test;host=localhost;port=3306';
        $this->assertEquals($expected, $this->object->getDsn());
    }

    /**
     * @covers Ruckusing_Adapter_Base::checkDbConfig
     */
    public function testCheckDbConfig()
    {
        $dbConfig = 'dsn';
        try {
            $this->object->checkDbConfig($dbConfig);
            $this->fail('checkDbConfig do not accept string argument!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'The argument dbConfig must be a array!';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $dbConfig = array();
        try {
            $this->object->checkDbConfig($dbConfig);
            $this->fail('checkDbConfig wait for the "database" argument!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'The argument dbConfig must be contains index "database"';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $dbConfig = array('database' => 'test');
        try {
            $this->object->checkDbConfig($dbConfig);
            $this->fail('checkDbConfig wait for the "host" argument!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'The argument dbConfig must be contains '
                . 'index "host" or index "socket"';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $dbConfig = array(
            'host' => 'localhost',
            'database' => 'test',
        );
        try {
            $this->object->checkDbConfig($dbConfig);
            $this->fail('checkDbConfig wait for the "user" argument!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'The argument dbConfig must be contains index "user"';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $dbConfig = array(
            'host' => 'localhost',
            'database' => 'test',
            'user' => 'test',
        );
        try {
            $this->object->checkDbConfig($dbConfig);
            $this->fail('checkDbConfig wait for the "password" argument!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'The argument dbConfig must be contains index "password"';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $dbConfig = array(
            'host' => 'localhost',
            'database' => 'test',
            'user' => 'test',
            'password' => 'test',
        );
        $this->assertTrue($this->object->checkDbConfig($dbConfig));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::supportsMigrations
     */
    public function testSupportsMigrations()
    {
        $this->assertTrue($this->object->supportsMigrations());
    }

    public function testGetLogger()
    {
        $this->assertInstanceOf('Ruckusing_Logger', $this->object->getLogger());
    }

    public function testSetLogger()
    {
        $logger = 'the logger';
        try {
            $this->object->setLogger($logger);
            $this->fail('setLogger do not accept string argument!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Logger parameter must be instance of Ruckusing_Logger';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $logger = $this->object->getLogger();
        $actual = $this->object->setLogger($logger);
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_Adapter', $actual);
    }

    public function testGetConnexion()
    {
        $dbConfig = array(
            'database' => 'ruckusing_migrations_test',
            'socket' => '/var/run/mysqld/mysqld.sock',
            'user' => 'rucku',
            'password' => 'rucku',
            'options' => array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8"),
        );
        $actual = new Ruckusing_Adapter_Mysql_Adapter($dbConfig, $this->_logger);
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_Adapter', $actual);
        $this->assertInstanceOf('PDO', $actual->getConnexion());
        //ini_set('mysql.default_socket', '/tmp/wrong.sock');
        $dbConfig = array(
            'database' => 'ruckusing_migrations_test',
            'socket' => '/tmp/wrong.sock',
            'user' => 'rucku',
            'password' => 'rucku',
        );
        $actual = new Ruckusing_Adapter_Mysql_Adapter($dbConfig, $this->_logger);
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_Adapter', $actual);
        try {
            $conn = $actual->getConnexion();
            $this->fail('The socket path is incorrect');
        } catch (Ruckusing_Exception_AdapterConnexion $e) {
            $msg = 'SQLSTATE[HY000] [2002] No such file or directory';
            $this->assertEquals($msg, $e->getMessage());
        }
        //ini_set('mysql.default_socket', '');
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::nativeDatabaseTypes
     */
    public function testNativeDatabaseTypes()
    {
		$expected = array(
            'primary_key'   => array(
                'name' => 'integer',
                'limit' => 11,
                'null' => false,
            ),
            'string'        => array(
                'name' => 'varchar',
                'limit' => 255,
            ),
            'text'          => array('name' => 'text'),
            'mediumtext'    => array('name' => 'mediumtext'),
            'integer'       => array(
                'name' => 'int',
                'limit' => 11,
            ),
            'smallinteger'  => array('name' => 'smallint'),
            'biginteger'    => array('name' => 'bigint'),
            'float'         => array('name' => 'float'),
            'decimal'       => array('name' => 'decimal'),
            'datetime'      => array('name' => 'datetime'),
            'timestamp'     => array('name' => 'timestamp'),
            'time'          => array('name' => 'time'),
            'date'          => array('name' => 'date'),
            'binary'        => array('name' => 'blob'),
            'boolean'       => array(
                'name' => 'tinyint',
                'limit' => 1,
            ),
        );
        $this->assertSame($expected, $this->object->nativeDatabaseTypes());
    }

    public function testHasTable()
    {
        $this->assertFalse($this->object->hasTable('unknown_table'));
        $this->assertFalse($this->object->hasTable('users'));
        
        //create it
        $this->object->executeDdl("CREATE TABLE `users` ( name varchar(20) );");
        
        //now make sure it does exist
        $this->assertTrue($this->object->hasTable('users'));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::createSchemaVersionTable
     */
    public function testCreateSchemaVersionTable()
    {
        $this->assertFalse($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
        $this->object->createSchemaVersionTable();
        $this->assertTrue($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::startTransaction
     * @covers Ruckusing_Adapter_Mysql_Adapter::_beginTransaction
     */
    public function testStartTransaction()
    {
        $this->object->startTransaction();
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::startTransaction
     * @covers Ruckusing_Adapter_Mysql_Adapter::_beginTransaction
     */
    public function testStartTransactionException()
    {
        $this->setExpectedException(
            'PHPUnit_Framework_Error', 
            'Transaction already started'
        );
        $this->object->startTransaction();
        $this->object->startTransaction();
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::commitTransaction
     * @covers Ruckusing_Adapter_Mysql_Adapter::_commit
     */
    public function testCommitTransaction()
    {
        $this->object->startTransaction();
        $this->object->commitTransaction();
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::commitTransaction
     * @covers Ruckusing_Adapter_Mysql_Adapter::_commit
     */
    public function testCommitTransactionException()
    {
        $this->setExpectedException(
            'PHPUnit_Framework_Error', 
            'Transaction not started'
        );
        $this->object->commitTransaction();
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::rollbackTransaction
     * @covers Ruckusing_Adapter_Mysql_Adapter::_rollback
     */
    public function testRollbackTransaction()
    {
        $this->object->startTransaction();
        $this->object->rollbackTransaction();
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::rollbackTransaction
     * @covers Ruckusing_Adapter_Mysql_Adapter::_rollback
     */
    public function testRollbackTransactionException()
    {
        $this->setExpectedException(
            'PHPUnit_Framework_Error', 
            'Transaction not started'
        );
        $this->object->rollbackTransaction();
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::quoteTable
     */
    public function testQuoteTable()
    {
        $tableName = 'test';
        $expected = '`' . $tableName . '`';
        $actual = $this->object->quoteTable($tableName);
        $this->assertEquals($expected, $actual);
        $actual = $this->object->identifier($tableName);
        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::columnDefinition
     */
    public function testColumnDefinition()
    {
        $expected = '`age` varchar(255)';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition('age', 'string')
        );

        $expected = '`age` varchar(32)';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition(
                'age',
                'string',
                array('limit' => 32)
            )
        );

        $expected = '`age` varchar(32) NOT NULL';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition(
                'age',
                'string',
                array(
                    'limit' => 32,
                    'null' => false,
                )
            )
        );

        $expected = '`age` varchar(32) DEFAULT \'abc\' NOT NULL';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition(
                'age',
                'string',
                array(
                    'limit' => 32,
                    'default' => 'abc',
                    'null' => false,
                )
            )
        );

        $expected = '`age` varchar(32) DEFAULT \'abc\'';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition(
                'age',
                'string',
                array(
                    'limit' => 32,
                    'default' => 'abc',
                )
            )
        );

        $expected = '`age` int(11)';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition('age', 'integer')
        );

        $expected = '`active` tinyint(1)';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition('active', 'boolean')
        );	
        
        $expected = '`weight` bigint(20)';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition(
                'weight',
                'biginteger',
                array('limit' => 20)
            )
        );
        
        $expected = '`age` int(11) AFTER `height`';
        $this->assertEquals(
            $expected,
            $this->object->columnDefinition(
                'age',
                'integer',
                array('after' => 'height')
            )
        );	
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::databaseExists
     */
    public function testDatabaseExists()
    {
        $this->assertFalse($this->object->databaseExists('unknownDb'));
        $this->assertTrue($this->object->databaseExists('ruckusing_migrations_test'));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::createDatabase
     */
    public function testCreateDatabase()
    {
        $dsn = array(
            'host' => 'localhost',
            'port' => 3306,
            'database' => 'ruckusing_migrations_test',
            'user' => 'rucku_test',
            'password' => 'rucku',
        );
        $object = new Ruckusing_Adapter_Mysql_Adapter($dsn, $this->_logger);
        $db = "users";
        $object->dropDatabase($db);
        $this->assertTrue($object->createDatabase($db));
        $this->assertFalse($object->createDatabase($db));
        $this->assertTrue($object->databaseExists($db));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::dropDatabase
     */
    public function testDropDatabase()
    {
        $dsn = array(
            'host' => 'localhost',
            'port' => 3306,
            'database' => 'ruckusing_migrations_test',
            'user' => 'rucku_test',
            'password' => 'rucku',
        );
        $object = new Ruckusing_Adapter_Mysql_Adapter($dsn, $this->_logger);
        $db = "users";
        $this->assertTrue($object->dropDatabase($db));
        $this->assertFalse($object->databaseExists($db));
        $this->assertFalse($object->dropDatabase($db));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::schema
     */
    public function testSchema()
    {
        $this->object->executeDdl("CREATE TABLE `users` ( name varchar(20) );");
        $this->object->executeDdl("CREATE VIEW `v_users` AS SELECT `name` FROM `users`;");
        $schema = $this->object->schema();
        $this->assertNotEmpty($schema);
        $expected = "CREATE TABLE `users` (
  `name` varchar(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE ALGORITHM=UNDEFINED DEFINER=`rucku`@`localhost` SQL SECURITY DEFINER VIEW `v_users` AS select `users`.`name` AS `name` from `users`;

";
        $this->assertEquals($expected, $schema);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::tableExists
     */
    public function testTableExists()
    {
        $this->assertFalse($this->object->tableExists('unknown_table'));
        $this->assertFalse($this->object->tableExists('users'));
        
        //create it
        $this->object->executeDdl("CREATE TABLE `users` (name varchar(20));");
        
        //now make sure it does exist
        $this->assertFalse($this->object->tableExists('users'));
        // reload all tables
        $this->assertTrue($this->object->tableExists('users', true));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::showFieldsFrom
     */
    public function testShowFieldsFrom()
    {
        $this->assertEmpty($this->object->showFieldsFrom('tableName'));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::execute
     */
    public function testExecute()
    {
        $query = 'SHOW DATABASE `ruckusing`'; // not correct
        try {
            $this->assertTrue($this->object->execute($query));
        } catch (Ruckusing_Exception_AdapterQuery $e) {
            $msg = "You have an error in your SQL syntax; "
                . "check the manual that corresponds to your MySQL "
                . "server version for the right syntax to use near "
                . "'DATABASE `ruckusing`' at line 1";
            $this->assertEquals($msg, $e->getMessage());
        }
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::query
     */
    public function testQuery()
    {
        $query = 'SHOW DATABASE `ruckusing`'; // not correct
        try {
            $this->assertTrue($this->object->query($query));
        } catch (Ruckusing_Exception_AdapterQuery $e) {
            $msg = "You have an error in your SQL syntax; "
                . "check the manual that corresponds to your MySQL "
                . "server version for the right syntax to use near "
                . "'DATABASE `ruckusing`' at line 1";
            $this->assertEquals($msg, $e->getMessage());
        }
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::selectOne
     */
    public function testSelectOne()
    {
        $this->object->executeDdl("CREATE TABLE `users` (name varchar(20));");
        $this->object->executeDdl("INSERT INTO `users` (`name`) VALUES ('first'), ('second'), ('third');");
        $expected = array('name' => 'first');
        $sql = 'SELECT `name` FROM `users`;';
        $actual = $this->object->selectOne($sql);
        $this->assertSame($expected, $actual);
        $expected = array('name' => 'third');
        $sql = 'SELECT `name` FROM `users` ORDER BY `name` DESC;';
        $actual = $this->object->selectOne($sql);
        $this->assertSame($expected, $actual);
    }

    public function testSelectOneError()
    {
        $query = 'UPDATE aTable SET id=1';
        try {
            $this->object->selectOne($query);
            $this->fail('method selectOne accept only SELECT or SHOW queries!');
        } catch (Ruckusing_Exception_AdapterQuery $e) {
            $msg = 'Query for selectOne() is not one of SELECT or SHOW: '
                . $query;
            $this->assertEquals($msg, $e->getMessage());
        }
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::selectAll
     */
    public function testSelectAll()
    {
        $this->object->executeDdl("CREATE TABLE `users` (name varchar(20));");
        $this->object->executeDdl("INSERT INTO `users` (`name`) VALUES ('first'), ('second'), ('third');");
        $expected = array(
            array('name' => 'first'),
            array('name' => 'second'),
            array('name' => 'third'),
        );
        $sql = "SELECT name FROM `users`;";
        $actual = $this->object->selectAll($sql);
        $expected = array(
            array('name' => 'third'),
            array('name' => 'second'),
            array('name' => 'first'),
        );
        $sql = "SELECT name FROM `users` ORDER BY `name` DESC;";
        $actual = $this->object->selectAll($sql);
        $this->assertSame($expected, $actual);
    }

    public function testSelectAllError()
    {
        $query = 'DELETE aTable';
        try {
            $this->object->selectAll($query);
            $this->fail('method selectAll accept only SELECT or SHOW queries!');
        } catch (Ruckusing_Exception_AdapterQuery $e) {
            $msg = 'Query for selectAll() is not one of SELECT or SHOW: '
                . $query;
            $this->assertEquals($msg, $e->getMessage());
        }
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::executeDdl
     */
    public function testExecuteDdl()
    {
        $sql = 'CREATE TABLE `users` (name varchar(20));';
        $actual = $this->object->executeDdl($sql);
        $this->assertTrue($actual);
        $query = 'UNKNOWN aTable';
        $actual = $this->object->executeDdl($query);
        $this->assertFalse($actual);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::dropTable
     */
    public function testDropTable()
    {
        $actual = $this->object->dropTable('users');
        $this->assertTrue($actual);
        $actual = $this->object->dropTable('users');
        $this->assertTrue($actual);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::createTable
     * @todo   Gestion exception
     */
    public function testCreateTable()
    {
        $tableName = 'users';
        $table = $this->object
            ->createTable('users', array('id' => false));
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_TableDefinition', $table);
        $table = $this->object->createTable('users');
        $this->assertInstanceOf('Ruckusing_Adapter_Mysql_TableDefinition', $table);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::quoteString
     */
    public function testQuoteString()
    {
        $string = "string'with'simple'quote";
        $expected = "string\'with\'simple\'quote";
        $actual = $this->object->quoteString($string);
        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::identifier
     */
    public function testIdentifier()
    {
        $tableName = 'test';
        $expected = '`' . $tableName . '`';
        $actual = $this->object->identifier($tableName);
        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::renameTable
     */
    public function testRenameTable()
    {
        try {
            $this->object->renameTable('', '');
            $this->fail('renameTable does not accept empty string for original table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing original table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->renameTable('users', '');
            $this->fail('renameTable does not accept empty string for new table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing new table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $sql = 'CREATE TABLE `users` (name varchar(20));';
        $this->object->executeDdl($sql);
        $actual = $this->object->renameTable('users', 'contacts');
        $this->assertTrue($actual);
        $this->assertFalse($this->object->tableExists('users', true));
        $this->assertTrue($this->object->tableExists('contacts'));
        $this->object->dropTable('contacts');
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::addColumn
     */
    public function testAddColumn()
    {
        try {
            $this->object->addColumn('', '', '');
            $this->fail('addColumn does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->addColumn('users', '', '');
            $this->fail('addColumn does not accept empty string for column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->addColumn('users', 'name', '');
            $this->fail('addColumn does not accept empty string for type!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing type parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        //create it
        $this->object->executeDdl('CREATE TABLE `users` (name varchar(20));');	

        $col = $this->object->columnInfo('users', 'name');
        $this->assertEquals('name', $col['field']);
        
        //add column
        $this->object->addColumn(
            'users',
            'fav_color',
            'string',
            array('limit' => 32)
        );
        $col = $this->object->columnInfo('users', 'fav_color');
        $this->assertEquals('fav_color', $col['field']);
        $this->assertEquals('varchar(32)', $col['type']);

        //add column
        $this->object->addColumn(
            'users',
            'latitude',
            'decimal',
            array(
                'precision' => 10,
                'scale' => 2,
            )
        );
        $col = $this->object->columnInfo('users', 'latitude');
        $this->assertEquals('latitude', $col['field']);
        $this->assertEquals('decimal(10,2)', $col['type']);
        
        //add column with unsigned parameter
        $this->object->addColumn(
            'users',
            'age',
            'integer',
            array('unsigned' => true)
        );
        $col = $this->object->columnInfo('users', 'age');
        $this->assertEquals('age', $col['field']);
        $this->assertEquals('int(11) unsigned', $col['type']);
        
        //add column with biginteger datatype
        $this->object->addColumn(
            'users',
            'weight',
            'biginteger',
            array('limit' => 20)
        );
        $col = $this->object->columnInfo('users', 'weight');
        $this->assertEquals('weight', $col['field']);
        $this->assertEquals('bigint(20)', $col['type']);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::removeColumn
     */
    public function testRemoveColumn()
    {
        try {
            $this->object->removeColumn('', '');
            $this->fail('removeColumn does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->removeColumn('users', '');
            $this->fail('removeColumn does not accept empty string for column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        //create it
        $sql = "CREATE TABLE `users` ( name varchar(20), age int(3) );";
        $this->object->executeDdl($sql);

        //verify it exists
        $col = $this->object->columnInfo('users', 'name');
        $this->assertEquals('name', $col['field']);
        
        //drop it
        $this->object->removeColumn('users', 'name');

        //verify it does not exist
        $col = $this->object->columnInfo('users', 'name');
        $this->assertEquals(null, $col);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::renameColumn
     */
    public function testRenameColumn()
    {
        try {
            $this->object->renameColumn('', '', '');
            $this->fail('renameColumn does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->renameColumn('users', '', '');
            $this->fail('renameColumn does not accept empty string for original column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing original column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->renameColumn('users', 'name', '');
            $this->fail('renameColumn does not accept empty string for new column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing new column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        //create it
        $this->object->executeDdl("CREATE TABLE `users` (name varchar(20));");	

        $before = $this->object->columnInfo('users', 'name');
        $this->assertEquals('varchar(20)', $before['type'] );			
        $this->assertEquals('name', $before['field'] );			
        
        //rename the name column
        $this->object->renameColumn('users', 'name', 'new_name');

        $after = $this->object->columnInfo('users', 'new_name');
        $this->assertEquals('varchar(20)', $after['type'] );			
        $this->assertEquals('new_name', $after['field'] );				
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::changeColumn
     */
    public function testChangeColumn()
    {
        try {
            $this->object->changeColumn('', '', '');
            $this->fail('changeColumn does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->changeColumn('users', '', '');
            $this->fail('changeColumn does not accept empty string for column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->changeColumn('users', 'name', '');
            $this->fail('changeColumn does not accept empty string for type!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing type parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        //create it
        $sql = "CREATE TABLE `users` (name varchar(20), age int(3));";
        $this->object->executeDdl($sql);

        //verify its type
        $col = $this->object->columnInfo('users', 'name');
        $this->assertEquals('varchar(20)', $col['type'] );			
        $this->assertEmpty($col['default']);			
        
        //change it, add a default too!
        $this->object->changeColumn(
            'users',
            'name',
            'string',
            array(
                'default' => 'abc',
                'limit' => 128,
            )
        );
        
        $col = $this->object->columnInfo('users', 'name');
        $this->assertEquals('varchar(128)', $col['type'] );						
        $this->assertEquals('abc', $col['default'] );			

        //change it, add a default too!
        $this->object->changeColumn(
            'users',
            'name',
            'integer',
            array(
                'default' => '1',
            )
        );
        
        $col = $this->object->columnInfo('users', 'name');
        $this->assertEquals('int(11)', $col['type'] );						
        $this->assertEquals('1', $col['default'] );			
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::columnInfo
     */
    public function testColumnInfo()
    {
        try {
            $this->object->columnInfo('', '');
            $this->fail('columnInfo does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->columnInfo('users', '');
            $this->fail('columnInfo does not accept empty string for column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        //create it
        $this->object->executeDdl("CREATE TABLE `users` (name varchar(20));");	

        $expected = array();
        $actual = $this->object->columnInfo('users', 'name');
        $this->assertInternalType('array', $actual);
        $this->assertEquals('varchar(20)', $actual['type'] );			
        $this->assertEquals('name', $actual['field'] );			
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::indexes
     */
    public function testIndexes()
    {
        try {
            $this->object->indexes('');
            $this->fail('indexes does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $sql = "CREATE TABLE `users` (id int(11) NOT NULL, name varchar(20), age int(3), "
            . "title varchar(20), extid int(5) NOT NULL, PRIMARY KEY (id));";
        $this->object->executeDdl($sql);
        $this->object->addIndex('users', 'name');
        $this->object->addIndex('users', 'extid', array('unique' => true));
        $expected = array(
            array(
                'name' => 'idx_users_extid',
                'unique' => true
            ),
            array(
                'name' => 'idx_users_name',
                'unique' => false
            ),
        );
        $this->assertSame($expected, $this->object->indexes('users'));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::hasIndex
     */
    public function testHasIndex()
    {
        try {
            $this->object->hasIndex('', '');
            $this->fail('hasIndex does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->hasIndex('users', '');
            $this->fail('hasIndex does not accept empty string for column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        $sql = "CREATE TABLE `users` (name varchar(20), age int(3), "
            . "title varchar(20));";
        $this->object->executeDdl($sql);
        $this->object->addIndex('users', 'name');
        
        $this->assertTrue($this->object->hasIndex('users', 'name'));
        $this->assertFalse($this->object->hasIndex('users', 'age'));
        $this->assertFalse($this->object->hasIndex('users', 'title'));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::addIndex
     */
    public function testAddIndex()
    {
        try {
            $this->object->addIndex('', '');
            $this->fail('addIndex does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->addIndex('users', '');
            $this->fail('addIndex does not accept empty string for column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        //create it
        $sql = "CREATE TABLE `users` (name varchar(20), age int(3), title varchar(20), other tinyint(1));";
        $this->object->executeDdl($sql);
        $this->object->addIndex('users', 'name');
        
        $this->assertTrue($this->object->hasIndex('users', 'name'));
        $this->assertFalse($this->object->hasIndex('users', 'age'));
        
        $this->object->addIndex('users', 'age', array('unique' => true));
        $this->assertTrue($this->object->hasIndex('users', 'age'));
        
        $this->object->addIndex(
            'users',
            'title',
            array('name' => 'index_on_super_title')
        );
        $this->assertTrue($this->object->hasIndex(
            'users',
            'title',
            array('name' => 'index_on_super_title')
        ));
        try {
            $this->object->addIndex(
                'users',
                'other',
                array('name' => 'index_on_super_super_very_maxi_mega_giga_long_title_aaaaaaaahhhhh')
            );
            $this->fail('Max identifier length');
        } catch (Ruckusing_Exception_InvalidIndexName $ex) {
            $msg = 'The auto-generated index name is too long for '
                . 'MySQL (max is 64 chars). Considering using \'name\' option '
                . 'parameter to specify a custom name for this index. '
                . 'Note: you will also need to specify this custom name '
                . 'in a drop_index() - if you have one.';
            $this->assertEquals($msg, $ex->getMessage());
        }
    }

    public function testMultiColumnIndex()
    {
        //create it
        $this->object->executeDdl('CREATE TABLE `users` (name varchar(20), age int(3));');
        $this->object->addIndex('users', array('name', 'age'));
        
        $this->assertTrue($this->object->hasIndex('users', array('name', 'age')));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::removeIndex
     */
    public function testRemoveIndex()
    {
        try {
            $this->object->removeIndex('', '');
            $this->fail('removeIndex does not accept empty string for table name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing table name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        try {
            $this->object->removeIndex('users', '');
            $this->fail('removeIndex does not accept empty string for column name!');
        } catch (Ruckusing_Exception_Argument $ex) {
            $msg = 'Missing column name parameter';
            $this->assertEquals($msg, $ex->getMessage());
        }
        //create it
        $this->object->executeDdl('CREATE TABLE `users` (name varchar(20), age int(3));');
        $this->object->addIndex('users', 'name');
        
        $this->assertTrue($this->object->hasIndex('users', 'name'));
        
        //drop it
        $this->object->removeIndex('users', 'name');
        $this->assertFalse($this->object->hasIndex('users', 'name'));
    }

    public function testRemoveIndexWithCustomIndexName()
    {
        //create it
        $this->object->executeDdl('CREATE TABLE `users` ( name varchar(20), age int(3));');	
        $this->object->addIndex('users', 'name', array('name' => 'my_special_index'));
        
        $this->assertTrue($this->object->hasIndex(
            'users',
            'name',
            array('name' => 'my_special_index')
        ));
        
        //drop it
        $this->object->removeIndex('users', 'name', array('name' => 'my_special_index'));
        $this->assertFalse($this->object->hasIndex(
            'users',
            'name',
            array('name' => 'my_special_index')
        ));
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::typeToSql
     */
    public function testTypeToSql()
    {
        try {
            $this->object->typeToSql('unknown', '');
        } catch (Ruckusing_Exception_Argument $e) {
            $msg = "Error: I dont know what column type of 'unknown' maps to for MySQL.
You provided: unknown
Valid types are: 
\tstring\n\ttext\n\tmediumtext\n\tinteger\n\tsmallinteger\n\tbiginteger\n\tfloat
\tdecimal\n\tdatetime\n\ttimestamp\n\ttime\n\tdate\n\tbinary\n\tboolean\n";
            $this->assertEquals($msg, $e->getMessage());
        }
        try {
            $this->object->typeToSql('decimal', array('scale' => 4));
        } catch (Ruckusing_Exception_Argument $e) {
            $msg = 'Error adding decimal column: precision cannot '
                . 'be empty if scale is specified';
            $this->assertEquals($msg, $e->getMessage());
        }
        $type = $this->object->typeToSql('integer', array('limit' => 12));
        $this->assertEquals('int(12)', $type);
        $type = $this->object->typeToSql('integer');
        $this->assertEquals('int(11)', $type);
        $type = $this->object->typeToSql('decimal', array('precision' => 2));
        $this->assertEquals('decimal(2)', $type);
        $type = $this->object->typeToSql('decimal', array('precision' => 2, 'scale' => 4));
        $this->assertEquals('decimal(2, 4)', $type);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::addColumnOptions
     * @covers Ruckusing_Adapter_Mysql_Adapter::_isSqlMethodCall
     * @todo   Implement testAddColumnOptions().
     */
    public function testAddColumnOptions()
    {
        try {
            $this->object->addColumnOptions(
                'int', 
                array('default' => 'sp_call()')
            );
            $this->fail(
                'addColumnOptions does not accept function '
                . 'calls as "default" option!'
            );
        } catch (Exception $e) {
            $msg = 'MySQL does not support function calls '
                . 'as default values, constants only.';
            $this->assertEquals($msg, $e->getMessage());
        }
        $colOpts = $this->object->addColumnOptions('int', '');
        $this->assertInternalType('string', $colOpts);
        $this->assertEmpty($colOpts);
        $colOpts = $this->object->addColumnOptions('int', array('unsigned' => true));
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(' UNSIGNED', $colOpts);
        $colOpts = $this->object->addColumnOptions('int', array('auto_increment' => true));
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(' auto_increment', $colOpts);
        $colOpts = $this->object->addColumnOptions('int', array('null' => false));
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(' NOT NULL', $colOpts);
        $colOpts = $this->object->addColumnOptions('int', array('after' => 'name'));
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(' AFTER `name`', $colOpts);
        $colOpts = $this->object->addColumnOptions('int', array('default' => 1));
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(' DEFAULT 1', $colOpts);
        $colOpts = $this->object->addColumnOptions('int', array('default' => true));
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(" DEFAULT '1'", $colOpts);
        $colOpts = $this->object->addColumnOptions('int', array('default' => 'string'));
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(" DEFAULT 'string'", $colOpts);
        $colOpts = $this->object->addColumnOptions(
            'int', 
            array(
                'unsigned' => true,
                'auto_increment' => true,
                'null' => false,
                'after' => 'name',
                'default' => 1
            )
        );
        $this->assertInternalType('string', $colOpts);
        $this->assertEquals(' UNSIGNED auto_increment DEFAULT 1 NOT NULL AFTER `name`', $colOpts);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::__toString
     */
    public function testToString()
    {
        $this->assertFalse($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
        $this->object->createSchemaVersionTable();
        $this->assertTrue($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
        $expected = 'Ruckusing_Adapter_Mysql_Adapter, version: 1.0';
        $return = $this->object->setCurrentVersion('firstVersion');
        $this->assertTrue($return);
        $this->assertEquals($expected, (string)$this->object);
        $this->assertEquals($expected, $this->object->__toString());
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::setCurrentVersion
     */
    public function testSetCurrentVersion()
    {
        $this->assertFalse($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
        $this->object->createSchemaVersionTable();
        $this->assertTrue($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
        $return = $this->object->setCurrentVersion('firstVersion');
        $this->assertTrue($return);
        $expected = array('version' => 'firstVersion');
        $actual = $this->object->selectOne(
            'SELECT version FROM ' . RUCKUSING_TS_SCHEMA_TBL_NAME . ';'
        );
        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers Ruckusing_Adapter_Mysql_Adapter::removeVersion
     */
    public function testRemoveVersion()
    {
        $this->assertFalse($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
        $this->object->createSchemaVersionTable();
        $this->assertTrue($this->object->hasTable(RUCKUSING_TS_SCHEMA_TBL_NAME));
        $return = $this->object->setCurrentVersion('firstVersion');
        $this->assertTrue($return);
        $expected = array('version' => 'firstVersion');
        $actual = $this->object->selectOne(
            'SELECT version FROM ' . RUCKUSING_TS_SCHEMA_TBL_NAME . ';'
        );
        $this->assertEquals($expected, $actual);
        $return = $this->object->removeVersion('firstVersion');
        $this->assertTrue($return);
        $actual = $this->object->selectOne(
            'SELECT version FROM ' . RUCKUSING_TS_SCHEMA_TBL_NAME . ';'
        );
        $this->assertNull($actual);
    }
}
