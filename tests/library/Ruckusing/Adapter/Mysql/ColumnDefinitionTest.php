<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-11 at 08:14:22.
 *
 * @group Ruckusing_Adapter
 * @group Ruckusing_Adapter_Mysql
 */
class Ruckusing_Adapter_Mysql_ColumnDefinitionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Ruckusing_Adapter_Mysql_ColumnDefinition
     */
    protected $object;

    /**
     * @var adapterMock
     */
    protected $_adapter;

    public function __construct()
    {
        $this->_adapter = new adapterMock(array(), '');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
        parent::tearDown();
    }

    /**
     */
    public function testConstructor()
    {
        try {
            new Ruckusing_Adapter_Mysql_ColumnDefinition('string', 'test', 'type');
            $this->fail(
                'Constructor Mysql ColumnDefinition '
                . 'require adapter Ruckusing_Adapter_Base'
            );
        } catch (Ruckusing_Exception_MissingAdapter $e) {
            $msg = 'Invalid MySQL Adapter instance.';
            $this->assertEquals($msg, $e->getMessage());
        }
        try {
            new Ruckusing_Adapter_Mysql_ColumnDefinition($this->_adapter, '', 'type');
            $this->fail(
                'Constructor Mysql ColumnDefinition does not accept empty string'
            );
        } catch (Ruckusing_Exception_Argument $e) {
            $msg = 'Invalid \'name\' parameter';
            $this->assertEquals($msg, $e->getMessage());
        }
        try {
            new Ruckusing_Adapter_Mysql_ColumnDefinition($this->_adapter, 'test', '');
            $this->fail(
                'Constructor Mysql ColumnDefinition does not accept empty string'
            );
        } catch (Ruckusing_Exception_Argument $e) {
            $msg = 'Invalid \'type\' parameter';
            $this->assertEquals($msg, $e->getMessage());
        }
        $column = new Ruckusing_Adapter_Mysql_ColumnDefinition($this->_adapter, 'test', 'string');
        $this->assertInstanceOf('Ruckusing_Adapter_ColumnDefinition', $column);
    }

    public function testToSqlAndToString()
    {
        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'last_name',
            'string',
            array('limit' => 32)
        );
		$this->assertEquals('`last_name` varchar(32)', $c->toSql());
		$this->assertEquals('`last_name` varchar(32)', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'last_name',
            'string',
            array('null' => false)
        );
		$this->assertEquals('`last_name` varchar(255) NOT NULL', $c->toSql());
		$this->assertEquals('`last_name` varchar(255) NOT NULL', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'last_name',
            'string',
            array(
                'default' => 'abc',
                'null' => false,
            )
        );
		$this->assertEquals("`last_name` varchar(255) DEFAULT 'abc' NOT NULL", $c->toSql());
		$this->assertEquals("`last_name` varchar(255) DEFAULT 'abc' NOT NULL", $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'created_at',
            'datetime',
            array('null' => false)
        );
		$this->assertEquals('`created_at` datetime NOT NULL', $c->toSql());
		$this->assertEquals('`created_at` datetime NOT NULL', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'id',
            'integer',
            array(
                'primary_key' => true,
                'unsigned' => true,
            )
        );
        $this->assertEquals('`id` int(11) UNSIGNED', $c->toSql());
        $this->assertEquals('`id` int(11) UNSIGNED', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'phone',
            'string',
            array(
                'limit' => 10
            )
        );
        $this->assertEquals('`phone` varchar(10)', $c->toSql());
        $this->assertEquals('`phone` varchar(10)', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'price',
            'decimal',
            array(
                'precision' => 2,
            )
        );
        $this->assertEquals('`price` decimal(2)', $c->toSql());
        $this->assertEquals('`price` decimal(2)', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'price',
            'decimal',
            array(
                'precision' => 2,
                'scale' => 4,
            )
        );
        $this->assertEquals('`price` decimal(2, 4)', $c->toSql());
        $this->assertEquals('`price` decimal(2, 4)', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'happy',
            'boolean',
            array(
                'default' => true,
            )
        );
        $this->assertEquals('`happy` tinyint(1) DEFAULT \'1\'', $c->toSql());
        $this->assertEquals('`happy` tinyint(1) DEFAULT \'1\'', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'licence',
            'text',
            array()
        );
        $this->assertEquals('`licence` text', $c->toSql());
        $this->assertEquals('`licence` text', $c->__toString());

        $c = new Ruckusing_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'avatar',
            'binary',
            array()
        );
        $this->assertEquals('`avatar` blob', $c->toSql());
        $this->assertEquals('`avatar` blob', $c->__toString());
    }
}
