<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-16 at 07:58:12.
 *
 * @group Ruckusing_Util
 */
class Ruckusing_Util_MigratorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Ruckusing_Util_Migrator
     */
    protected $object;

    /**
     * @var utilAdapterMock
     */
    protected $_adapter;

    public function __construct()
    {
        $this->_adapter = new utilAdapterMock(array(), '');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new Ruckusing_Util_Migrator($this->_adapter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
        parent::tearDown();
    }

    public function testConstructor()
    {
        try {
            new Ruckusing_Util_Migrator('wrong adapter');
            $this->fail('Adapter not implement Ruckusing_Adapter_Base');
        } catch (Ruckusing_Exception_Argument $e) {
            $msg = 'adapter must be implement Ruckusing_Adapter_Base!';
            $this->assertEquals($msg, $e->getMessage());
        }
        $migrator = new Ruckusing_Util_Migrator($this->_adapter);
        $this->assertInstanceOf('Ruckusing_Util_Migrator', $migrator);
    }

    /**
     * @covers Ruckusing_Util_Migrator::getMaxVersion
     */
    public function testGetMaxVersion()
    {
        $versions = array();
        $this->_adapter->versions = $versions;
        $this->assertNull($this->object->getMaxVersion());
        $versions = array(
            array(
                'version' => '1',
            ),
        );
        $this->_adapter->versions = $versions;
        $actual = $this->object->getMaxVersion();
        $this->assertNotNull($actual);
        $this->assertEquals('1', $actual);
        $versions = array(
            array(
                'version' => '1',
            ),
            array(
                'version' => '2',
            ),
            array(
                'version' => '3',
            ),
        );
        $this->_adapter->versions = $versions;
        $actual = $this->object->getMaxVersion();
        $this->assertNotNull($actual);
        $this->assertEquals('3', $actual);
    }

    /**
     * @covers Ruckusing_Util_Migrator::getRunnableMigrations
     * @todo   Implement testGetRunnableMigrations().
     */
    public function testGetRunnableMigrations()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ruckusing_Util_Migrator::generateTimestamp
     * @todo   Implement testGenerateTimestamp().
     */
    public function testGenerateTimestamp()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ruckusing_Util_Migrator::resolveCurrentVersion
     * @todo   Implement testResolveCurrentVersion().
     */
    public function testResolveCurrentVersion()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ruckusing_Util_Migrator::getExecutedMigrations
     * @todo   Implement testGetExecutedMigrations().
     */
    public function testGetExecutedMigrations()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ruckusing_Util_Migrator::getMigrationFiles
     * @todo   Implement testGetMigrationFiles().
     */
    public function testGetMigrationFiles()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
