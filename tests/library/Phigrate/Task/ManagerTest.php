<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-14 at 15:50:56.
 *
 * @group Phigrate_Task
 */
class Phigrate_Task_ManagerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Phigrate_Task_Manager
     */
    protected $object;

    /**
     * @var adapterMock
     */
    protected $_adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->_adapter = new adapterMock(array(), '');
        $this->object = new Phigrate_Task_Manager($this->_adapter, null, null);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_adapter = null;
        $this->object = null;
        parent::tearDown();
    }

    public function testInstance()
    {
        $this->assertInstanceOf('Phigrate_Task_Manager', $this->object);
    }

    public function testSetDirectoryOfTasks()
    {
        $this->assertFalse($this->object->hasTask('db:migrate'));
        try {
            $path = '/tmp/unknown/tasks';
            $this->object->setDirectoryOfTasks($path);
            $this->fail('path of tasks is incorrect!');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = 'Task dir: "' . $path . '" does not exist!';
            $this->assertEquals($msg, $e->getMessage());
        }
        $path = PHIGRATE_BASE . '/library/Task';
        $actual = $this->object->setDirectoryOfTasks($path);
        $this->assertFalse($this->object->hasTask('db:migrate'));
        $actual = $this->object->setDirectoryOfTasks($path, true);
        $this->assertInstanceOf('Phigrate_Task_Manager', $actual);
        $this->assertTrue($actual->hasTask('db:migrate'));
    }

    public function testSetDirectoryOfTasksWithManyDirectories()
    {
        $this->assertFalse($this->object->hasTask('fs:hello'));
        $paths = array(
            PHIGRATE_BASE . '/library/Task',
            FIXTURES_PATH . '/tasks',
        );
        $actual = $this->object->setDirectoryOfTasks($paths, false);
        $this->assertFalse($this->object->hasTask('fs:hello'));
        $actual = $this->object->setDirectoryOfTasks($paths, true);
        $this->assertInstanceOf('Phigrate_Task_Manager', $actual);
        $this->assertTrue($actual->hasTask('fs:hello'));
    }

    public function testSetDirectoryOfMigrations()
    {
        try {
            $this->object->setDirectoryOfMigrations('/migrateTests');
            $this->fail('Migration directory does not exists!');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = 'Migration dir: "/migrateTests" does not exist!';
            $this->assertEquals($msg, $e->getMessage());
        }
        // Set directory of tasks
        $path = PHIGRATE_BASE . '/library/Task';
        $this->object->setDirectoryOfTasks($path, true);
        $this->object->setDirectoryOfMigrations('/tmp');
        $task = new taskMock();
        $taskName = 'my:task';
        $this->object->registerTask($taskName, $task);
        $this->assertTrue($this->object->hasTask($taskName));
        $this->assertInstanceOf(
            'Phigrate_Task_ITask',
            $this->object->getTask($taskName)
        );
        $task = $this->object->getTask($taskName);
        $this->assertEquals('/tmp', $task->dir);
    }

    public function testSetAdapter()
    {
        try {
            $this->object->setAdapter('myAdapter');
            $this->fail('Task_Manager::setAdapter accept only Phigrate_Adapter_Base argument!');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = 'Adapter must be implement Phigrate_Adapter_Base!';
            $this->assertEquals($msg, $e->getMessage());
        }
        $actual = $this->object->setAdapter($this->_adapter);
        $this->assertInstanceOf('Phigrate_Task_Manager', $actual);
        $this->assertSame($this->_adapter, $actual->getAdapter());
    }

    public function testGetAdapter()
    {
        $this->assertInstanceOf('Phigrate_Adapter_Base', $this->object->getAdapter());
    }

    public function testGetTask()
    {
        try {
            $this->object->getTask('unknown');
            $this->fail('Unknown task specified!');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = 'Please: you must specify the directory of tasks!';
            $this->assertEquals($msg, $e->getMessage());
        }

        // Set directory of tasks
        $path = PHIGRATE_BASE . '/library/Task';
        $actual = $this->object->setDirectoryOfTasks($path);
        $this->assertInstanceOf('Phigrate_Task_Manager', $actual);

        try {
            $task = 'unknwon';
            $this->object->getTask($task);
            $this->fail('Unknown task specified!');
        } catch (Phigrate_Exception_InvalidTask $e) {
            $msg = 'Task (' . $task . ') is not registered.';
            $this->assertEquals($msg, $e->getMessage());
            $lastErr = array_pop($this->object->getLogger()->err);
            $this->assertEquals($lastErr, $e->getMessage());
        }
        $task = $this->object->getTask('db:migrate');
        $this->assertInstanceOf('Phigrate_Task_ITask', $task);
    }

    public function testHasTask()
    {
        $this->assertFalse($this->object->hasTask('db:migrate'));
        // Set directory of tasks
        $path = PHIGRATE_BASE . '/library/Task';
        $actual = $this->object->setDirectoryOfTasks($path);
        $this->assertInstanceOf('Phigrate_Task_Manager', $actual);
        $this->assertFalse($this->object->hasTask('db:migrate'));
        $this->object->getTask('db:migrate');
        $this->assertTrue($this->object->hasTask('db:migrate'));
    }

    /**
     */
    public function testRegisterTask()
    {
        // Set directory of tasks
        $path = PHIGRATE_BASE . '/library/Task';
        $actual = $this->object->setDirectoryOfTasks($path, true);
        $taskName = 'db:migrate';
        $task = $this->object->getTask($taskName);
        try {
            $this->object->registerTask($taskName, $task);
            $this->fail('Task "' . $taskName . '" is already registered!');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = "Task name '" . $taskName . "' is already defined!";
            $this->assertEquals($msg, $e->getMessage());
        }
        $task = 'no task';
        $taskName = 'my:task';
        try {
            $this->object->registerTask($taskName, $task);
            $this->fail('Task "' . $taskName . '" does not implement ITask!');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = "Task (" . $taskName . ") does not implement Phigrate_ITask";
            $this->assertEquals($msg, $e->getMessage());
        }
        $task = new taskMock();
        $taskName = 'my:task';
        $actual = $this->object->registerTask($taskName, $task);
        $this->assertTrue($actual);
        $this->assertTrue($this->object->hasTask($taskName));
        $this->assertInstanceOf('Phigrate_Task_ITask', $this->object->getTask($taskName));
    }

    /**
     */
    public function testExecute()
    {
        // Set directory of tasks
        $path = PHIGRATE_BASE . '/library/Task';
        $this->object->setDirectoryOfTasks($path, true);
        $task = new taskMock();
        $taskName = 'my:task';
        $this->object->registerTask($taskName, $task);
        $this->assertTrue($this->object->hasTask($taskName));
        $this->assertInstanceOf(
            'Phigrate_Task_ITask',
            $this->object->getTask($taskName)
        );
        $args = array(
            'test' => 'value',
            'get' => 'task',
            'execute' => 'manager',
        );
        $return = $this->object->execute($taskName, $args);
        $this->assertInternalType('string', $return);
        $expected = 'taskMock::execute: ' . implode(', ', $args);
        $this->assertEquals($expected, $return);
    }

    /**
     */
    public function testHelp()
    {
        // Set directory of tasks
        $path = PHIGRATE_BASE . '/library/Task';
        $this->object->setDirectoryOfTasks($path, true);
        $task = new taskMock();
        $taskName = 'my:task';
        $this->object->registerTask($taskName, $task);
        $this->assertTrue($this->object->hasTask($taskName));
        $this->assertInstanceOf(
            'Phigrate_Task_ITask',
            $this->object->getTask($taskName)
        );
        $help = $this->object->help($taskName);
        $this->assertInternalType('string', $help);
        $expected = 'my help task';
        $this->assertEquals($expected, $help);
    }
}

/* vim: set expandtab tabstop=4 shiftwidth=4: */
