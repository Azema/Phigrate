<?php


/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-11 at 08:15:35.
 *
 * @group Phigrate_Adapter
 * @group Phigrate_Adapter_Mysql
 */
class Phigrate_Adapter_Mysql_TableDefinitionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Phigrate_Adapter_Mysql_TableDefinition
     */
    protected $object;

    /**
     * @var adapterMock
     */
    protected $_adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->_adapter = new adapterMock(array(), '');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_adapter = null;
        $this->object = null;
        parent::tearDown();
    }

    public function testConstructor()
    {
        try {
            new Phigrate_Adapter_Mysql_TableDefinition('string', 'test');
            $this->fail(
                'Constructor Mysql TableDefinition '
                . 'require adapter Phigrate_Adapter_Base'
            );
        } catch (Phigrate_Exception_MissingAdapter $e) {
            $msg = 'Invalid MySQL Adapter instance.';
            $this->assertEquals($msg, $e->getMessage());
        }
        try {
            new Phigrate_Adapter_Mysql_TableDefinition($this->_adapter, '');
            $this->fail(
                'Constructor Mysql TableDefinition does not accept empty string'
            );
        } catch (Phigrate_Exception_Argument $e) {
            $msg = 'Invalid \'name\' parameter';
            $this->assertEquals($msg, $e->getMessage());
        }
        $options = array(
            'id' => false,
        );
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            $options
        );
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
);";
        $this->assertEquals($expected, $sql);
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
,
 PRIMARY KEY (`id`));";
        $this->assertEquals($expected, $sql);
        $options = array(
            'id' => 'my_id',
        );
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            $options
        );
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`my_id` int(11) UNSIGNED auto_increment NOT NULL,
 PRIMARY KEY (`my_id`));";
        $this->assertEquals($expected, $sql);
        $options = array(
            'options' => 'CHARSET utf8',
        );
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            $options
        );
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
,
 PRIMARY KEY (`id`)) CHARSET utf8;";
        $this->assertEquals($expected, $sql);
        $options = array(
            'force' => true,
        );
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            $options
        );
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
,
 PRIMARY KEY (`id`));";
        $this->assertEquals($expected, $sql);
        $options = array(
            'temporary' => true,
        );
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            $options
        );
        $sql = $table->finish(true);
        $expected = "CREATE TEMPORARY TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
,
 PRIMARY KEY (`id`));";
        $this->assertEquals($expected, $sql);
    }

    public function testColumn()
    {
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'integer');
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
`test` int(11) NULL DEFAULT NULL,
 PRIMARY KEY (`id`));";
        $this->assertEquals($expected, $sql);
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'integer', array('primary_key' => true));
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
`test` int(11) NOT NULL,
 PRIMARY KEY (`test`,`id`));";
        $this->assertEquals($expected, $sql);
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'integer', array('auto_increment' => true));
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
`test` int(11) auto_increment NOT NULL,
 PRIMARY KEY (`id`));";
        $this->assertEquals($expected, $sql);
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'string', array('auto_increment' => true));
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
`test` varchar(255) auto_increment NOT NULL,
 PRIMARY KEY (`id`));";
        $this->assertEquals($expected, $sql);
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'string');
        $table->column('test', 'string');
        $sql = $table->finish(true);
        $expected = "CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
`test` varchar(255) NULL DEFAULT NULL,
 PRIMARY KEY (`id`));";
        $this->assertEquals($expected, $sql);
    }

    /**
     */
    public function testFinish()
    {
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'string', array('auto_increment' => true));
        $table->finish();
        $expected = array("CREATE TABLE `users` (
`id` int(11) UNSIGNED auto_increment NOT NULL,
`test` varchar(255) auto_increment NOT NULL,
 PRIMARY KEY (`id`));");
        $queries = $this->_adapter->getConnexion()->getQueries();
        $this->assertSame($expected, $queries);
    }

    public function testIncluded()
    {
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'string');
        $this->assertTrue($table->included('test'));
        $column = new Phigrate_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'test',
            'string'
        );
        $this->assertInstanceOf('Phigrate_Adapter_ColumnDefinition', $column);
        $this->assertTrue($table->included($column));
        $this->assertFalse($table->included('new'));
        $column = new Phigrate_Adapter_Mysql_ColumnDefinition(
            $this->_adapter,
            'new',
            'integer'
        );
        $this->assertInstanceOf('Phigrate_Adapter_Mysql_ColumnDefinition', $column);
        $this->assertFalse($table->included($column));
    }

    public function testToSql()
    {
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        $table->column('test', 'string');
        $expected = '`test` varchar(255) NULL DEFAULT NULL';
        $sql = $table->toSql();
        $this->assertEquals($expected, $sql);
        $table->column('new', 'integer');
        $expected = '`test` varchar(255) NULL DEFAULT NULL,`new` int(11) NULL DEFAULT NULL';
        $sql = $table->toSql();
        $this->assertEquals($expected, $sql);
    }

    public function testUnknownMethod()
    {
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users'
        );
        try {
            $line = __LINE__+1;
            $table->unknown();
            $this->fail('Unknown method called.');
        } catch (Phigrate_Exception_MissingMigrationMethod $e) {
            $msg = 'Method unknown (unknown in file '.__FILE__.':'.$line.')';
            $this->assertEquals($msg, $e->getMessage());
        }
    }
    
    public function testPrefixTable()
    {
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            array('prefix' => 'usr')
        );
        $table->column('name', 'string');
        $expected = '`usr_name` varchar(255) NULL DEFAULT NULL';
        $sql = $table->toSql();
        $this->assertEquals($expected, $sql);
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            array('prefix' => 'usr_')
        );
        $table->column('name', 'string');
        $expected = '`usr_name` varchar(255) NULL DEFAULT NULL';
        $sql = $table->toSql();
        $this->assertEquals($expected, $sql);
        $table = new Phigrate_Adapter_Mysql_TableDefinition(
            $this->_adapter,
            'users',
            array('prefix' => 'usr__')
        );
        $table->column('name', 'string');
        $expected = '`usr_name` varchar(255) NULL DEFAULT NULL';
        $sql = $table->toSql();
        $this->assertEquals($expected, $sql);
    }
}

/* vim: set expandtab tabstop=4 shiftwidth=4: */
