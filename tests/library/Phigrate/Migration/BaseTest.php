<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-15 at 19:12:10.
 *
 * @group Phigrate_Migration
 */
class Phigrate_Migration_BaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Phigrate_Migration_Base
     */
    protected $object;

    /**
     * @var adapterMock
     */
    protected $_adapter;

    public function __construct()
    {
        $this->_adapter = new migrationAdapterMock(array(), '');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new migrationMock($this->_adapter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
        parent::tearDown();
    }

    public function testConstructor()
    {
        try {
            new migrationMock('wrong adapter');
            $this->fail('Adapter not implement Phigrate_Adapter_Base');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = 'adapter must be implement Phigrate_Adapter_Base!';
            $this->assertEquals($msg, $e->getMessage());
        }
        $migrationBase = new migrationMock($this->_adapter);
        $this->assertInstanceOf('Phigrate_Migration_Base', $migrationBase);
    }

    /**
     */
    public function testSetAdapter()
    {
        $adapter = 'wrong adapter';
        try {
            $this->object->setAdapter($adapter);
            $this->fail('argument not implement Phigrate_Adapter_Base');
        } catch (Phigrate_Exception_Argument $e) {
            $msg = 'adapter must be implement Phigrate_Adapter_Base!';
            $this->assertEquals($msg, $e->getMessage());
        }
        $actual = $this->object->setAdapter($this->_adapter);
        $this->assertInstanceOf('Phigrate_Migration_Base', $actual);
    }

    /**
     */
    public function testGetAdapter()
    {
        $actual = $this->object->getAdapter();
        $this->assertInstanceOf('Phigrate_Adapter_Base', $actual);
    }

    /**
     */
    public function testCreateDatabase()
    {
        $name = 'migration_test';
        $return = $this->object->createDatabase($name);
        $this->assertTrue($return);
        $this->assertEquals($name, $this->_adapter->datas['createDatabase']['name']);
    }

    /**
     */
    public function testDropDatabase()
    {
        $name = 'migration_test';
        $return = $this->object->dropDatabase($name);
        $this->assertTrue($return);
        $this->assertEquals($name, $this->_adapter->datas['dropDatabase']['name']);
    }

    /**
     */
    public function testCreateTable()
    {
        $name = 'users';
        $options = array('NAMES utf8');
        $table = $this->object->createTable($name, $options);
        $this->assertInstanceOf('Phigrate_Adapter_TableDefinition', $table);
        $this->assertEquals($name, $this->_adapter->datas['createTable']['name']);
        $this->assertEquals($options, $this->_adapter->datas['createTable']['options']);
    }

    /**
     */
    public function testDropTable()
    {
        $name = 'users';
        $return = $this->object->dropTable($name);
        $this->assertTrue($return);
        $this->assertEquals($name, $this->_adapter->datas['dropTable']['name']);
    }

    /**
     */
    public function testRenameTable()
    {
        $name = 'users';
        $newName = 'new_users';
        $return = $this->object->renameTable($name, $newName);
        $this->assertTrue($return);
        $this->assertEquals($name, $this->_adapter->datas['renameTable']['name']);
        $this->assertEquals($newName, $this->_adapter->datas['renameTable']['newName']);
    }

    /**
     */
    public function testAddColumn()
    {
        $tableName = 'users';
        $columnName = 'firstname';
        $type = 'string';
        $options = array('null' => false);
        $return = $this->object->addColumn($tableName, $columnName, $type, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['addColumn']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['addColumn']['columnName']);
        $this->assertEquals($type, $this->_adapter->datas['addColumn']['type']);
        $this->assertEquals($options, $this->_adapter->datas['addColumn']['options']);
    }

    /**
     */
    public function testRemoveColumn()
    {
        $tableName = 'users';
        $columnName = 'civility';
        $return = $this->object->removeColumn($tableName, $columnName);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['removeColumn']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['removeColumn']['columnName']);
    }

    /**
     */
    public function testChangeColumn()
    {
        $tableName = 'users';
        $columnName = 'login';
        $type = 'string';
        $options = array('null' => false, 'limit' => 25);
        $return = $this->object->changeColumn($tableName, $columnName, $type, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['changeColumn']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['changeColumn']['columnName']);
        $this->assertEquals($type, $this->_adapter->datas['changeColumn']['type']);
        $this->assertEquals($options, $this->_adapter->datas['changeColumn']['options']);
    }

    /**
     */
    public function testRenameColumn()
    {
        $tableName = 'users';
        $columnName = 'login';
        $newColumnName = 'pseudo';
        $return = $this->object->renameColumn($tableName, $columnName, $newColumnName);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['renameColumn']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['renameColumn']['columnName']);
        $this->assertEquals($newColumnName, $this->_adapter->datas['renameColumn']['newColumnName']);
    }

    /**
     */
    public function testAddIndex()
    {
        $tableName = 'users';
        $columnName = 'login';
        $options = array('unique' => true);
        $return = $this->object->addIndex($tableName, $columnName, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['addIndex']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['addIndex']['columnName']);
        $this->assertEquals($options, $this->_adapter->datas['addIndex']['options']);
    }

    /**
     */
    public function testRemoveIndex()
    {
        $tableName = 'users';
        $columnName = 'login';
        $options = array('unique' => true);
        $return = $this->object->removeIndex($tableName, $columnName, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['removeIndex']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['removeIndex']['columnName']);
        $this->assertEquals($options, $this->_adapter->datas['removeIndex']['options']);
    }

    /**
     */
    public function testAddForeignKeyByAddIndex()
    {
        $tableName = 'users';
        $columnName = 'address';
        $options = array(
            'foreignKey' => true,
            'tableRef' => 'addresses',
            'columnRef' => 'name',
        );
        $return = $this->object->addIndex($tableName, $columnName, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['addForeignKey']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['addForeignKey']['columnName']);
        $this->assertEquals($options['tableRef'], $this->_adapter->datas['addForeignKey']['tableRef']);
        $this->assertEquals($options['columnRef'], $this->_adapter->datas['addForeignKey']['columnRef']);
        $this->assertEquals($options, $this->_adapter->datas['addForeignKey']['options']);
    }

    /**
     */
    public function testAddForeignKey()
    {
        $tableName = 'users';
        $columnName = 'address';
        $tableRef = 'addresses';
        $columnRef = 'name';
        $options = array();

        $return = $this->object->addForeignKey($tableName, $columnName, $tableRef, $columnRef, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['addForeignKey']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['addForeignKey']['columnName']);
        $this->assertEquals($tableRef, $this->_adapter->datas['addForeignKey']['tableRef']);
        $this->assertEquals($columnRef, $this->_adapter->datas['addForeignKey']['columnRef']);
        $this->assertEquals($options, $this->_adapter->datas['addForeignKey']['options']);
    }

    /**
     */
    public function testRemoveForeignKeyByRemoveIndex()
    {
        $tableName = 'users';
        $columnName = 'address';
        $options = array(
            'foreignKey' => true,
            'tableRef' => 'addresses',
            'columnRef' => 'name',
        );
        $return = $this->object->removeIndex($tableName, $columnName, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['removeForeignKey']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['removeForeignKey']['columnName']);
        $this->assertEquals($options['tableRef'], $this->_adapter->datas['removeForeignKey']['tableRef']);
        $this->assertEquals($options['columnRef'], $this->_adapter->datas['removeForeignKey']['columnRef']);
        $this->assertEquals($options, $this->_adapter->datas['removeForeignKey']['options']);
    }

    /**
     */
    public function testRemoveForeignKey()
    {
        $tableName = 'users';
        $columnName = 'address';
        $tableRef = 'addresses';
        $columnRef = 'name';
        $options = array();

        $return = $this->object->removeForeignKey($tableName, $columnName, $tableRef, $columnRef, $options);
        $this->assertTrue($return);
        $this->assertEquals($tableName, $this->_adapter->datas['removeForeignKey']['tableName']);
        $this->assertEquals($columnName, $this->_adapter->datas['removeForeignKey']['columnName']);
        $this->assertEquals($tableRef, $this->_adapter->datas['removeForeignKey']['tableRef']);
        $this->assertEquals($columnRef, $this->_adapter->datas['removeForeignKey']['columnRef']);
        $this->assertEquals($options, $this->_adapter->datas['removeForeignKey']['options']);
    }

    /**
     */
    public function testExecute()
    {
        $query = 'SHOW DATABASES;';
        $return = $this->object->execute($query);
        $this->assertTrue($return);
        $this->assertEquals($query, $this->_adapter->datas['execute']['query']);
    }

    /**
     */
    public function testSelectOne()
    {
        $query = 'SELECT name FROM `users` LIMIT 1;';
        $return = $this->object->selectOne($query);
        $expected = array('name' => 'resultOne');
        $this->assertEquals($query, $this->_adapter->datas['selectOne']['query']);
        $this->assertEquals($expected, $return);
    }

    /**
     */
    public function testSelectAll()
    {
        $query = 'SELECT name FROM `users`;';
        $return = $this->object->selectAll($query);
        $expected = array(
            array('name' => 'resultAll'),
            array('name' => 'second'),
        );
        $this->assertEquals($query, $this->_adapter->datas['selectAll']['query']);
        $this->assertEquals($expected, $return);
    }

    /**
     */
    public function testQuery()
    {
        $query = 'SHOW DATABASES;';
        $return = $this->object->execute($query);
        $this->assertTrue($return);
        $this->assertEquals($query, $this->_adapter->datas['execute']['query']);
    }

    /**
     */
    public function testQuote()
    {
        $value = 'I test "quoted" string';
        $return = $this->object->quote($value);
        $expected = '\'I test \"quoted\" string\'';
        $this->assertEquals($value, $this->_adapter->datas['quote']['value']);
        $this->assertEquals($expected, $return);
    }

    public function testUnknownMethod()
    {
        try {
            $line = __LINE__+1;
            $this->object->unknown();
            $this->fail('Unknown method called.');
        } catch (Phigrate_Exception_MissingMigrationMethod $e) {
            $msg = 'Method unknown (unknown in file '.__FILE__.':'.$line.')';
            $this->assertEquals($msg, $e->getMessage());
        }
    }

    public function testComment()
    {
        $comment = 'Ceci est un commentaire a ajouter au code SQL';
        $this->object->comment($comment);
        $this->assertContains($comment, $this->_adapter->datas['comments']);
    }

    public function testCreateView()
    {
        $name = 'users';
        $select = 'select usr_id from users';
        $return = $this->object->createView($name, $select);
        $this->assertTrue($return);
        $this->assertEquals($name, $this->_adapter->datas['createView']['name']);
        $this->assertEquals($select, $this->_adapter->datas['createView']['select']);
    }

    public function testChangeView()
    {
        $name = 'users';
        $select = 'select usr_id from users';
        $return = $this->object->changeView($name, $select);
        $this->assertTrue($return);
        $this->assertEquals($name, $this->_adapter->datas['changeView']['name']);
        $this->assertEquals($select, $this->_adapter->datas['changeView']['select']);
    }

    /**
     */
    public function testDropView()
    {
        $name = 'users';
        $return = $this->object->dropView($name);
        $this->assertTrue($return);
        $this->assertEquals($name, $this->_adapter->datas['dropView']['name']);
    }
}

/* vim: set expandtab sw=4: */
