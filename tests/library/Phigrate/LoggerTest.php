<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-18 at 08:22:54.
 */
class Phigrate_LoggerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Phigrate_Logger
     */
    protected $object;

    /**
     * @var string
     */
    protected static $_filename;

    public static function setUpBeforeClass()
    {
        self::$_filename = PHIGRATE_BASE . '/tests/logs/tests.log';
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = Phigrate_Logger::instance(self::$_filename);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testInstance()
    {
        $logger = Phigrate_Logger::instance(self::$_filename);
        $this->assertSame($this->object, $logger);
        $logger = Phigrate_Logger::instance('/tmp/test_logger2.log');
        $this->assertSame($this->object, $logger);
    }

    public function testDestruct()
    {
        $this->object->__destruct();
    }

    public function testSetPriority()
    {
        $msg = 'msg de test debug without define priority, by default all';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[DEBUG\] '.$msg.'$/';
        $this->object->debug($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);

        $this->object->setPriority(Phigrate_Logger::ERROR);
        $msg = 'msg de test warn with priority err';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[WARN\] '.$msg.'$/';
        $this->object->warn($msg);
        $file = file(self::$_filename);
        $this->assertNotRegExp($expected, $file[count($file)-1]);

        $this->object->setPriority(Phigrate_Logger::WARNING);
        $msg = 'msg de test err with priority warn';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[ERR\] '.$msg.'$/';
        $this->object->err($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test warn with priority warn';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[WARN\] '.$msg.'$/';
        $this->object->warn($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test info with priority warn';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[INFO\] '.$msg.'$/';
        $this->object->info($msg);
        $file = file(self::$_filename);
        $this->assertNotRegExp($expected, $file[count($file)-1]);

        $this->object->setPriority(Phigrate_Logger::INFO);
        $msg = 'msg de test err with priority info';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[ERR\] '.$msg.'$/';
        $this->object->err($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test warn with priority info';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[WARN\] '.$msg.'$/';
        $this->object->warn($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test info with priority info';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[INFO\] '.$msg.'$/';
        $this->object->info($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test debug with priority info';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[DEBUG\] '.$msg.'$/';
        $this->object->debug($msg);
        $file = file(self::$_filename);
        $this->assertNotRegExp($expected, $file[count($file)-1]);

        $this->object->setPriority(Phigrate_Logger::DEBUG);
        $msg = 'msg de test err with priority debug';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[ERR\] '.$msg.'$/';
        $this->object->err($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test warn with priority debug';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[WARN\] '.$msg.'$/';
        $this->object->warn($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test info with priority debug';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[INFO\] '.$msg.'$/';
        $this->object->info($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test debug with priority debug';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[DEBUG\] '.$msg.'$/';
        $this->object->debug($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);

        $this->object->setPriority(Phigrate_Logger::DEBUG);
    }

    public function testDebug()
    {
        $msg = 'msg de test';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[DEBUG\] '.$msg.'$/';
        $this->object->debug($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
    }

    public function testInfo()
    {
        $msg = 'msg de test';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[INFO\] '.$msg.'$/';
        $this->object->info($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
    }

    public function testWarn()
    {
        $msg = 'msg de test';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[WARN\] '.$msg.'$/';
        $this->object->warn($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
    }

    public function testErr()
    {
        $msg = 'msg de test';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[ERR\] '.$msg.'$/';
        $this->object->err($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
    }

    public function testLog()
    {
        $msg = 'msg de test';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[INFO\] '.$msg.'$/';
        $this->object->log($msg);
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test 2';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[DEBUG\] '.$msg.'$/';
        $this->object->log($msg, 'debug');
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test 3';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[WARN\] '.$msg.'$/';
        $this->object->log($msg, 'warn');
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test 4';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[ERR\] '.$msg.'$/';
        $this->object->log($msg, 'err');
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
        $msg = 'msg de test 5';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[UNKNOWN\] '.$msg.'$/';
        $this->object->log($msg, 'unknown');
        $file = file(self::$_filename);
        $this->assertRegExp($expected, $file[count($file)-1]);
    }

    public function testClose()
    {
        $this->object->close();
        $msg = 'msg de test 6';
        $expected = '/^\w+ \d+ \d+:\d+:\d+ \[UNKNOWN\] '.$msg.'$/';
        $this->object->log($msg, 'unknown');
        $file = file(self::$_filename);
        $this->assertNotRegExp($expected, $file[count($file)-1]);
    }
}

/* vim: set expandtab tabstop=4 shiftwidth=4: */
