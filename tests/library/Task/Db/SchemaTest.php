<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-20 at 08:34:27.
 *
 * @group Task_Db
 */
class Task_Db_SchemaTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Task_Db_Schema
     */
    protected $object;

    /**
     * @var adapterMock
     */
    protected $_adapter;

    public function __construct()
    {
        $this->_adapter = new adapterTaskMock(array(), '');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->_adapter->upExceptionSchema = false;
        $this->object = new Task_Db_Schema($this->_adapter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
        parent::tearDown();
    }

    public function testExecuteWithException()
    {
        $this->_adapter->upExceptionSchema = true;
        try {
            $this->object->execute(array());
            $this->fail('Exception required.');
        } catch (Phigrate_Exception_Task $e) {
            $msg = 'Up exception required';
            $this->assertEquals($msg, $e->getMessage());
            if (PHP_VERSION_ID >= 50300) {
                $this->assertInstanceOf('Exception', $e->getPrevious());
            }
        }
    }

    public function testExecuteWithoutMigrationDir()
    {
        try {
            $this->object->execute(array());
            $this->fail('MigrationDir is not define!');
        } catch (Phigrate_Exception_Task $e) {
            $msg = 'file_put_contents(/schema.txt): failed to open stream: '
                . 'Permission denied';
            $this->assertEquals($msg, $e->getMessage());
        }
    }

    public function testExecute()
    {
        $this->_adapter->setTableSchemaExist(true);
        $this->object->setDirectoryOfMigrations('/tmp');
        $expected = FIXTURES_PATH . '/db/schema.txt';
        $actual = $this->object->execute(array());
        $this->assertFileExists('/tmp/schema.txt');
        $this->assertFileEquals($expected, '/tmp/schema.txt');
    }

    public function testHelp()
    {
        $expected =<<<USAGE
Task: \033[36mdb:schema\033[0m

It can be beneficial to get a dump of the DB in raw SQL format which represents
the current version.

\033[31mNote\033[0m: This dump only contains the actual schema (e.g. the DML needed to
reconstruct the DB), but not any actual data.

In MySQL terms, this task would not be the same as running the mysqldump command
(which by defaults does include any data in the tables).

USAGE;
        $actual = $this->object->help();
        $this->assertEquals($expected, $actual);
    }
}
